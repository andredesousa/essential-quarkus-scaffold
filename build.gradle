plugins {
    id 'com.diffplug.spotless' version '6.2.2'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.spotbugs' version '5.0.5'
    id 'com.star-zero.gradle.githook' version '1.2.1'
    id 'io.quarkus' version '2.7.1.Final'
    id 'pl.allegro.tech.build.axion-release' version '1.14.1'
    id 'ru.netris.commitlint' version '1.4.1'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.73.0'
    id 'checkstyle'
    id 'jacoco'
    id 'java'
    id 'pmd'
}

group = 'app'
version = scmVersion.version

repositories {
    mavenCentral()
}

sourceSets {
    functionalTest {
        compileClasspath += sourceSets.main.output + project.configurations.testCompileClasspath
        runtimeClasspath += sourceSets.main.output + project.configurations.testRuntimeClasspath
    }
}

dependencies {
    implementation enforcedPlatform('io.quarkus.platform:quarkus-bom:2.7.1.Final')
    implementation 'io.quarkus:quarkus-resteasy-jackson'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

githook {
    failOnMissingHooksDir = false
    hooks {
        'commit-msg' {
            task = 'commitlint'
        }
    }
}

checkstyle {
    toolVersion = '9.0'
    configFile = file('checkstyle.xml')
}

pmd {
    toolVersion = '6.38.0'
}

spotless {
    java {
        target 'src/**/*.java'
        importOrder()
        removeUnusedImports()
        prettier([
            'prettier': '2.5.1',
            'prettier-plugin-java': '1.6.1'
        ]).configFile('.prettierrc')
    }
}

spotbugs {
  toolVersion = '4.4.1'
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

check {
    dependsOn.clear()
    dependsOn 'lint', 'test'
}

test {
    finalizedBy jacocoTestReport
	useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

task lint() {
    dependsOn 'formatCheck', 'checkstyle', 'pmd', 'spotbugs'
    description = 'Runs several static code analysis.'
    group = 'Verification'
}

task checkstyle() {
    dependsOn 'checkstyleFunctionalTest', 'checkstyleMain', 'checkstyleTest'
    description = 'Runs Checkstyle analysis for the source folder.'
    group = 'Verification'
}

task pmd() {
    dependsOn 'pmdFunctionalTest', 'pmdMain', 'pmdTest'
    description = 'Runs PMD analysis for the source folder.'
    group = 'Verification'
}

task spotbugs() {
    dependsOn 'spotbugsFunctionalTest', 'spotbugsMain', 'spotbugsTest'
    description = 'Runs SpotBugs analysis for the source folder.'
    group = 'Verification'

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            html.enabled = true
        }
    }
}

task format() {
    dependsOn 'spotlessApply'
    description = 'Applies code formatting steps to source code in-place.'
    group = 'Verification'
}

task formatCheck() {
    dependsOn 'spotlessCheck'
    description = 'Checks that source code satisfies formatting steps.'
    group = 'Verification'
}

task generateChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    description = 'Generates a changelog from GIT repository.'
    group = 'Release'
    fromRepo = file('.')
    file = file('CHANGELOG.md');
    templateContent = file('changelog.mustache').getText('UTF-8');
}

task buildImage(type: Exec) {
    commandLine 'docker', 'build', '-f', 'src/main/docker/Dockerfile', '-t', 'quarkus-api', '.'
    description = 'Builds a Docker image of the application.'
    group = 'Build'
}

task deploy(type: Exec) {
    commandLine 'ansible-playbook', 'ci/deploy/deploy-to-swarm.yaml'
    description = 'Deploys the application to Docker Swarm.'
    group = 'Release'
}
